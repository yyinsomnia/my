yii的单入口'index.php' or 'index-test.php'

入口很简单找到framework里面的yii.php,再找到配置文件main.php
初始化--Yii::createWebApplication($config)->run();

framewokr/yii.php也很简单：
require(dirname(__FILE__).'/YiiBase.php');
class Yii extends YiiBase
{
}

YiiBase.php 才是核心类
开头定义一些列常量,为了避免冲突常量以'YII_'开头
defined('YII_BEGIN_TIME') or define('YII_BEGIN_TIME',microtime(true));

class YiiBase摘要
public static $classMap=array();    //被autoloading机制使用 keys为类名 values为与之对应的class file path
public static $enableInlcudePath=true;    //whether to rely on PHP include path to autoload class files

很快找到index.php中的
Yii::createWebApplication($config)->run();
public static function createWebApplication($config=null)
{
	 return self::createApplication('CWebApplication',$config);
}

public static function createApplication($class,$config=null)
{
	return new $class($config);	//new CWebApplication($config)
}

这个时候你会发现找不到CWebApplication这个类
于是找到文件底部,发现
spl_autoload_register(array('YiiBase','autoload'));    //注册__autoload()函数
require(YII_PATH.'/base/interfaces.php');    //接口
autoload() and import() can be analysis together

public static function autoload($className)
{
	// use include so that the error PHP file may appear
	if(isset(self::$classMap[$className]))
		include(self::$classMap[$className]); //不用担心多次加载 new一个类多次 第一次找到了类的文件include 第二次不会触发
	elseif(isset(self::$_coreClasses[$className])) //self::$_coreClasses定义了一些的class对应的class file path
		include(YII_PATH.self::$_coreClasses[$className]);
	else
	{
		// include class file relying on include_path
		if(strpos($className,'\\')===false)  // class without namespace 注意'\\' 而不是'\' 在''中表示'需要转移所以'\'会认为没有闭合的'
		{
			if(self::$enableIncludePath===false) //You may set this to be false if your hosting environment doesn't allow changing the PHP
			{
				foreach(self::$_includePaths as $path)
				{
					$classFile=$path.DIRECTORY_SEPARATOR.$className.'.php';
					if(is_file($classFile))
					{
						include($classFile);
						if(YII_DEBUG && basename(realpath($classFile))!==$className.'.php') //check wether the className equal classFile's name
							throw new CException(Yii::t('yii','Class name "{class}" does not match class file "{file}".', array(
								'{class}'=>$className,
								'{file}'=>$classFile,
							)));
						break;
					}
				}
			}
			else
				include($className.'.php');
		}
		else  // class name with namespace in PHP 5.3
		{
			$namespace=str_replace('\\','.',ltrim($className,'\\'));
			if(($path=self::getPathOfAlias($namespace))!==false)
				include($path.'.php');
			else
				return false;
		}
		return class_exists($className,false) || interface_exists($className,false); // check the class or interface exists
	}
	return true;
}

public static function import($alias,$forceInclude=false)
{
	if(isset(self::$_imports[$alias]))  // previously imported
		return self::$_imports[$alias];

	if(class_exists($alias,false) || interface_exists($alias,false))  //the second parameter false do not use __autoload
		return self::$_imports[$alias]=$alias;

	if(($pos=strrpos($alias,'\\'))!==false) // a class name in PHP 5.3 namespace format
	{
		$namespace=str_replace('\\','.',ltrim(substr($alias,0,$pos),'\\'));
		if(($path=self::getPathOfAlias($namespace))!==false)
		{
			$classFile=$path.DIRECTORY_SEPARATOR.substr($alias,$pos+1).'.php';
			if($forceInclude)
			{
				if(is_file($classFile))
					require($classFile);
				else
					throw new CException(Yii::t('yii','Alias "{alias}" is invalid. Make sure it points to an existing PHP file and the file is readable.',array('{alias}'=>$alias)));
				self::$_imports[$alias]=$alias; //use the $_imports to avoid the require_once()
			}
			else
				self::$classMap[$alias]=$classFile; //lazyload add to the $classMap for autoload
			return $alias;
		}
		else
			throw new CException(Yii::t('yii','Alias "{alias}" is invalid. Make sure it points to an existing directory.',
				array('{alias}'=>$namespace)));
	}

	if(($pos=strrpos($alias,'.'))===false)  // a simple class name, this if make me confused
	{
		if($forceInclude && self::autoload($alias)) //autoload return the boolen value wether found the class
			self::$_imports[$alias]=$alias;
		return $alias;
	}

	$className=(string)substr($alias,$pos+1);
	$isClass=$className!=='*';

	if($isClass && (class_exists($className,false) || interface_exists($className,false)))
		return self::$_imports[$alias]=$className;

	if(($path=self::getPathOfAlias($alias))!==false)
	{
		if($isClass)
		{
			if($forceInclude)
			{
				if(is_file($path.'.php'))
					require($path.'.php');
				else
					throw new CException(Yii::t('yii','Alias "{alias}" is invalid. Make sure it points to an existing PHP file and the file is readable.',array('{alias}'=>$alias)));
				self::$_imports[$alias]=$className;
			}
			else
				self::$classMap[$className]=$path.'.php';
			return $className;
		}
		else  // a directory
		{
			if(self::$_includePaths===null)
			{
				self::$_includePaths=array_unique(explode(PATH_SEPARATOR,get_include_path()));
				if(($pos=array_search('.',self::$_includePaths,true))!==false)
					unset(self::$_includePaths[$pos]); //unset the path '.'
			}

			array_unshift(self::$_includePaths,$path);

			if(self::$enableIncludePath && set_include_path('.'.PATH_SEPARATOR.implode(PATH_SEPARATOR,self::$_includePaths))===false)
				self::$enableIncludePath=false;

			return self::$_imports[$alias]=$path;
		}
	}
	else
		throw new CException(Yii::t('yii','Alias "{alias}" is invalid. Make sure it points to an existing directory or file.',
			array('{alias}'=>$alias)));
}

