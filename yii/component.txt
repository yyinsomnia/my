本来想先写db相关，但是看到yii的思想里面基本逃不了component的概念，所以先写component
回到CApplication::__construct
初始化了异常和错误的处理后，就开始注册核心的组建
$this->initSystemHandlers();
$this->registerCoreComponents();

	protected function registerCoreComponents()
	{
		$components=array(
			'coreMessages'=>array(
				'class'=>'CPhpMessageSource',
				'language'=>'en_us',
				'basePath'=>YII_PATH.DIRECTORY_SEPARATOR.'messages',
			),
			'db'=>array(
				'class'=>'CDbConnection',
			),
			'messages'=>array(
				'class'=>'CPhpMessageSource',
			),
			'errorHandler'=>array(
				'class'=>'CErrorHandler',
			),
			'securityManager'=>array(
				'class'=>'CSecurityManager',
			),
			'statePersister'=>array(
				'class'=>'CStatePersister',
			),
			'urlManager'=>array(
				'class'=>'CUrlManager',
			),
			'request'=>array(
				'class'=>'CHttpRequest',
			),
			'format'=>array(
				'class'=>'CFormatter',
			),
		);

		$this->setComponents($components);
	}

可以看到很多熟悉的组建吧！
接下来看看是如何注册的也就是$this->setComponents($components)
setComponents 又是循环$components 调用setComponent..
现在进入CMoudle::setComponent($id, $component, $merge=true)
插播一句。。。bool isset ( mixed $var [, mixed $... ] ) 今天才发现可以这么用
函数体里面大致的思想就是把component以及其config放到CModules的私有变量中
$component === null 注销掉这个组件
$component instanceof IApplicationComponent 赋值给$this->_components[$id];如果没有初始化则初始化
isset($this->_components[$id]) //注意进入这个条件判断那么$component一定是数组了！数组就是配置啦
	isset($component[‘class’]) && get_class($this->_components[$id]) !==$component[‘class’]
		unset($this->_components[$id]);
		$this->_componnets[$id] = $component;
		return;//意思就是如果2个同id的组件所属的类都不一样 则直接用后一个替换掉前一个
	//如果不是上述情况则则把$component赋值到$this->_components[$id],如果有相同的配置则覆盖掉旧的
isset($this->_componentConfig[$id]['class'],$component['class'])
			&& $this->_componentConfig[$id]['class']!==$component['class’])
//如果已存在的组件配置class和加载的组件配置class不一样，直接重新赋值组件配置
$this->_componentConfig[$id]=$component; //we should ignore merge here
			return;

		if(isset($this->_componentConfig[$id]) && $merge)
			$this->_componentConfig[$id]=CMap::mergeArray($this->_componentConfig[$id],$component);
		else
			$this->_componentConfig[$id]=$component;
//最后就没啥了，如果允许合并就合并config 不允许的话就重新赋值config
类里面的properties are private 对于visibility and inherit I don’t understand well
这里可以看出注册的核心组件如果没有特别说明只是初始化存储了config参数，并没有在此时进行实例化，yii的lazyload思想在这里也有所体现
注意$_components存的数组元素应该是object而$_componentConfig存的数组元素应该是基本数值(配置参数)
然后通过Yii::app()->db 这种用法找到CModule::__get()
	public function __get($name)
	{
		if($this->hasComponent($name))
			return $this->getComponent($name);
		else
			return parent::__get($name);
	}
我们来看看getComponent()
	public function getComponent($id,$createIfNull=true)
	{
		if(isset($this->_components[$id])) //如果存在直接返回
			return $this->_components[$id];
		elseif(isset($this->_componentConfig[$id]) && $createIfNull)
		{
			$config=$this->_componentConfig[$id];
			if(!isset($config['enabled']) || $config['enabled']) //如果没有设置enabled或者enabled != false
			{
				Yii::trace("Loading \"$id\" application component",'system.CModule');
				unset($config['enabled']);
				$component=Yii::createComponent($config);
				$component->init();
				return $this->_components[$id]=$component;
			}
		}
	}
继续看到Yii::createComponent($config)
	public static function createComponent($config)
	{
		if(is_string($config)) //暂时不会进入该条件分支
		{
			$type=$config;
			$config=array();
		}
		elseif(isset($config['class'])) //这个进去了 类名给$type了
		{
			$type=$config['class'];
			unset($config['class']);
		}
		else
			throw new CException(Yii::t('yii','Object configuration must be an array containing a "class" element.'));

		if(!class_exists($type,false))
			$type=Yii::import($type,true); //这里import返回的是classname

		if(($n=func_num_args())>1) //暂时不会进入该条件分支..好乱啊，这个方法还能乱传n个参数
		{
			$args=func_get_args();
			if($n===2)
				$object=new $type($args[1]);
			elseif($n===3)
				$object=new $type($args[1],$args[2]);
			elseif($n===4)
				$object=new $type($args[1],$args[2],$args[3]);
			else
			{
				unset($args[0]);
				$class=new ReflectionClass($type);
				// Note: ReflectionClass::newInstanceArgs() is available for PHP 5.1.3+
				// $object=$class->newInstanceArgs($args);
				$object=call_user_func_array(array($class,'newInstance'),$args);
			}
		}
		else
			$object=new $type; //标红！终于new 了

		foreach($config as $key=>$value)
			$object->$key=$value; //把config里面的参数赋值给对象

		return $object;
	}
终于$component对象有了 看看$component->init();
CApplicationComponent::init()
	/**
	 * Initializes the application component.
	 * This method is required by {@link IApplicationComponent} and is invoked by application.
	 * If you override this method, make sure to call the parent implementation
	 * so that the application component can be marked as initialized.
	 */
	public function init()
	{
		$this->attachBehaviors($this->behaviors);
		$this->_initialized=true; //标记组件已经初始化
	}
各个组件都可以override 这个 方法 不过要确定 call the parent implementation 

今天看了基本所有的Yii的class 都是inherit from CComponent
举个例子，CController extends CBaseController, CBaseController extends CComponent